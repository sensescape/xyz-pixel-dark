# Author: Geraldine Sarmiento

# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key

    text_font_family: 'Orbitron'

# Fonts
fonts:
    Orbitron:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/orbitron/v7/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff
          url: fonts/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff

    Cairo:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/cairo/v1/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff
          url: fonts/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff


scene:
    background:
        color: [0.000,0.000,0.000]

sources:
    # mapzen:
    #     type: MVT
    #     # url:  https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
    #     url: https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
    #     url_params:
    #         api_key: JJiaZE63TZObzPrmx0TQkw
    #     tile_size: 512
    #     max_zoom: 16

    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 16
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 15

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                style: earth-pixelate
                order: global.feature_order
                color: [0.080,0.080,0.100]

    water:
        data: { source: mapzen, layer: water }
        draw:
            polygons:
                style: water-pixelate
                # style: water-pixelate-noise1
                order: global.feature_order
                # color: [0.266,0.274,0.300]
                color: [0.189,0.216,0.270]

        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: [1],  area: { min: 10000000000 } }
                    - { $zoom: [2],  area: { min: 7000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: [3],  area: { min: 5000000000 } }
                    - { $zoom: [4],  area: { min: 300000000 } }
                    - { $zoom: [5],  area: { min: 50000000 } }
                    - { $zoom: [6],  area: { min: 50000000 } }
                    - { $zoom: [7],  area: { min: 50000000 } }
                    - { $zoom: [8],  area: { min: 50000000 } }
                    - { $zoom: [9],  area: { min: 15000000 } }
                    - { $zoom: [10], area: { min: 4000000 } }
                    - { $zoom: [11], area: { min: 1000000 } }
                    - { $zoom: [12], area: { min: 250000 } }
                    - { $zoom: [13], area: { min: 150000 } }
                    - { $zoom: [14], area: { min: 40000 } }
                    - { $zoom: { min: 15 } }
            draw:
                polygons:
                    # color: [0.266,0.274,0.300]
                    color: [0.189,0.216,0.270]

        other-water-areas:
            filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                polygons:
                    # color: [0.266,0.274,0.300]
                    color: [0.189,0.216,0.270]

    landuse:
        data: { source: mapzen }
        draw:
            polygons:
                order: global.feature_order
                visible: false
        # tier1:
        national_park:
            filter:
                all:
                    - kind: [national_park, battlefield, protected_area]
                any:
                    - not: { operator: [ "United States Forest Service" ] }
                    - protect_class: ['2','3','5']
            draw:
                polygons:
                    style: parks-pixelate
                    color: [0.108,0.134,0.200]
                    visible: true
            us_national_park:
                # yosemite national park, death valley national park, grand canyon national park
                filter:
                    any:
                        - operator: [ "United States National Park Service" ]
                        - protect_class: ['2','3','5']
                draw:
                    polygons:
                        style: parks-pixelate
                        color: [0.058,0.084,0.150]
                        visible: true

        conservation:
            filter:
                $zoom: { min: 4 }
                kind: [protected_area, nature_reserve, national_park]
                not: { protect_class: ['2','3','5']}
            draw:
                polygons:
                    style: parks-pixelate
                    color: [0.073,0.125,0.170]
                    visible: true

        national_forest_level_6:
            filter:
                all:
                    - kind: forest
                any:
                    - protect_class: ['6']
                    - operator: ['United States Forest Service']
            draw:
                polygons:
                    style: parks-pixelate
                    color: [0.031,0.134,0.150]
                    visible: true
        
        forest-landcover:
            filter: { kind: [forest, natural_forest, wood, natural_wood, natural_park], $zoom: { min: 10 }, not: { operator: "United States Forest Service" } }
            draw:
                polygons:
                    style: parks-stripes-2-gradients
                    color: [0.000,0.000,0.000]
                    visible: true

        parks-and-national-forests-not-national-park:
            filter:
                all:
                    - $zoom: { min: 4 }
                    - kind: [park, national_park]
                any:
                    - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
                    - not: { protect_class: ['2','3','5','6'] }
            # default for national forests and more?
            draw:
                polygons:
                    style: parks-pixelate
                    color: [0.028,0.101,0.130]
                    visible: true
            national_park:
                #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                filter:
                    all:
                        - kind: parks-pixelate
                        - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                draw:
                    polygons:
                        visible: true

        golf_course:
            filter:
                kind: golf_course
            draw:
                polygons:
                    style: parks-pixelate
                    color: [0.057,0.117,0.140]
                    visible: true

        university:
            filter:
                all:
                    - kind: [university, college]
                    - $zoom: { min: 14 }
            draw:
                polygons:
                    style: parks-pixelate
                    color: [0.073,0.125,0.170]
                    visible: true

    roads:
        data: { source: mapzen, layer: roads }
        draw:
            lines:
                width: 1px
                order: global.feature_order
                outline:
                    order: 352

        early:
            filter: { $zoom: { max: 15 } }
            draw:
                lines:
                    outline:
                        order: global.feature_order

        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    # cap: butt
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: global.feature_order

        # default outlines starting at zoom 16
        default-outline-width:
            filter: { $zoom: { min: 16 } }
            draw:
                lines:
                    outline:
                        width: function () { return 3/16 * Math.log($zoom); }

        natural_earth_highways:
            filter: { $zoom: { min: 5, max: 8 } }
            draw:
                lines:
                    cap: round
                    join: round
                    color: [0.252,0.283,0.360]
                    width: 1px
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [0.252,0.283,0.360]
                        width: 0.5px
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        visible: false

        highway:
            filter: { kind: highway, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [[5,[0.252,0.283,0.360]], [12,[0.000,0.000,0.000]]]
                    width: [[5, 0px], [8, 0.1px], [12, 0.1px], [14, 2px], [16, 6.5px], [17, 22m]]
                    outline:
                        color: [[5,[0.252,0.283,0.360]], [14,[0.252,0.283,0.360]]]
                        width: [[5, 0px], [12, 0.5px], [14, 1px], [16, 2px]]

            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [0.252,0.283,0.360]
                        width: [[8, 0px], [13, 0px], [18, 2px]]
                        outline:
                            width: 0px
                early_link:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: 352
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: [0.000,0.000,0.000]
                            outline:
                                color: [0.150,0.150,0.150]

            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        color: [0.000,0.000,0.000]
                        outline:
                            color: [0.150,0.150,0.150]

            highway_bridge:
                filter: {is_bridge: true}
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt

        major_road:
            filter: { kind: major_road, $zoom: { min: 11 } }
            # default style
            draw:
                lines:
                    color: [[13, [0.252,0.283,0.360]], [16, [0.000,0.000,0.000]]]
                    width: [[13, 0.25px], [16,0.1px], [18, 4px]]
                    outline:
                        color: [0.252,0.283,0.360]
                        width: [[13, 0px], [15, 0.1px], [17, 1px]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        color: [[13, [0.252,0.283,0.360]], [14, [0.000,0.000,0.000]]]
                        width: [[13, 0.25px], [14, 0.1px], [15, 2px], [17, 8px], [18, 10m]]
                        outline:
                            color: [0.252,0.283,0.360]
                            width: [[13, 0px], [16, 1px]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 2; }
                    primary:
                        filter: { kind: [primary] }
                        draw:
                            lines:
                                outline:
                                    order: function() { return feature.sort_rank + 1; }
                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            color: [[11,[0.252,0.283,0.360]], [12, [0.000,0.000,0.000]]]
                            width: [[11, 0.25px], [12, 0.1px], [15, 1.25px], [16, 2px], [17, 8px], [18, 10m]]
                            outline:
                                color: [0.252,0.283,0.360]
                                width: [[11, 0px], [14, 0.5px], [17, 1px]]
                    early:
                        filter: { $zoom: { max: 16 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [[11,[0.150,0.150,0.150]], [12, [0.000,0.000,0.000]]]
                                outline:
                                    color: [0.150,0.150,0.150]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [[11,[0.252,0.283,0.360]], [12, [0.000,0.000,0.000]]]
                        width: [[11, 0.25px], [12, 0.1px], [15, 1.25px], [18, 8px]]
                        outline:
                            color: [0.252,0.283,0.360]
                            width: [[11, 0px], [14, 0.5px], [17, 1px]]
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [[13, [0.150,0.150,0.150]], [16, [0.000,0.000,0.000]]]
                        outline:
                            color: [0.150,0.150,0.150]
            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        color: [0.252,0.283,0.360]
                        width: [[13,0px], [15,1px], [18,1.5px]]
                        outline:
                            width: 0px
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: 353 #function() { return feature.sort_rank + 2; }
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [0.252,0.283,0.360]
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: {is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [0.150,0.150,0.150]


            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        color: [0.252,0.283,0.360]
                        width: [[13,0px], [15,1px], [18,1.5px]]
                        outline:
                            width: 0px
                early:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 3; }
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [0.252,0.283,0.360]
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 3; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [0.150,0.150,0.150]
                link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            color: [0.252,0.283,0.360]


        # minor_road:
        #     filter: { kind: minor_road, not: { kind_detail: service }, $zoom: { min: 16 } }
        #     draw:
        #         lines:
        #             color: [0.650,0.650,0.650]
        #             width: [[16,0px], [18,1px]]

    buildings:
        data: { source: mapzen, layer: buildings }
        filter:
            not: { location: underground }
        draw:
            polygons:
                visible: false
                order: 329
                color: [0.158,0.176,0.220]

        footprints:
            filter:
                any:
                    - { $zoom: [13], scale_rank: [1,2] }
                    - { $zoom: [14], scale_rank: [1,2,3] }
                    - { $zoom: [15], height: { min: 100 } }
                    - { $zoom: [15], area: { min: 700 } }
                    - { $zoom: [15], volume: { min: 100000 } }
                    - { $zoom: [16], area: { min: 100 } }
                    - { $zoom: [16], volume: { min: 50000 } }
                    - { $zoom: { min: 17 }, area: true }
            draw:
                polygons:
                    visible: true
                    style: buildings-pixelate
                    # style: grid-gradient

            # extrude:
            #     filter:
            #         all:
            #             - $zoom: { min: 15 }
            #             - height: { min: 200 }
            #             - not:
            #                 - layer: [-1, -2, -3, -4, -5]
            #     draw:
            #         polygons:
            #             style: polygons-windows
            #             # style: polygons-glass-walls
            #             visible: true
            #             color: [0.500,0.500,0.500]
            #             extrude: global.building_extrude_height

        in_university:
            filter: { landuse_kind: [university,school] }
            draw:
                polygons:
                    visible: true
                    style: grid-gradient

    places:
        data: { source: mapzen, layer: places }
        filter:
            name: true
        draw:
            text-blend-order:
                visible: false    # labels are enabled by each layer below
                buffer: 3px
                font:
                    family: global.text_font_family
                    fill: [0.800,0.800,0.800]
            # END NOTE

        populated-places:
            filter:
                kind: locality
            draw:
                text-blend-order:
                    visible: true
                    buffer: 42px
                    font:
                        size: [[5,9px],[8,10px],[12,11px]]
                        stroke: { color: [0.000,0.000,0.000], width: 6px }

            # _text_early:
            #     filter: { $zoom: { max: 11 } }
            #     draw:
            #         text-blend-order:
            #             visible: false


            # HACK
            # NOTE: These should use icon: buffer instead of going visible: false, but there are problems using icon here :(
            # This fixes Paris area, but causes problems for small places in the USA eg Table Bluff near Eureka, California.
            funky-village:
                filter: { $zoom: [11], population: { max: 1000 }, kind_detail: [village] }
                draw:
                    text-blend-order:
                        visible: false
            funky-isolated_dwelling:
                filter: { $zoom: [13], kind_detail: [isolated_dwelling] }
                draw:
                    text-blend-order:
                        visible: false
            hamlet:
                filter: { $zoom: [13], kind_detail: hamlet }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            # someone in London and Salt Lake City thought neighbourhoods should be tagged place: locality
            # They were wrong
            funky-fake-neighbourhoods:
                filter: { $zoom: { min: 13 }, kind_detail: [locality] }
                draw:
                    text-blend-order:
                        visible: false


            population-10m-up:
                filter:
                    population: { min: 10000000 }
                draw:
                    text-blend-order:
                        priority: 6
                        font:
                            size: [[2,11px],[6,15px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-5m-10m:
                filter:
                    population: { min: 5000000, max: 10000000 }
                draw:
                    text-blend-order:
                        priority: 7
                        font:
                            size: [[4,10px],[6,14px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-1m-5m:
                filter:
                    population: { min: 1000000, max: 5000000 }
                draw:
                    text-blend-order:
                        priority: 9
                        font:
                            size: [[4,10px],[6,14px],[8,15px],[12,18px],[13,0px]]
            population-500k-1m:
                filter:
                    population: { min: 500000, max: 1000000 }
                draw:
                    text-blend-order:
                        priority: 11
                        font:
                            size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
            population-200k-500k:
                filter:
                    population: { min: 200000, max: 500000 }
                draw:
                    text-blend-order:
                        priority: 13
                        font:
                            size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
            population-100k-200k:
                filter:
                    population: { min: 100000, max: 200000 }
                draw:
                    text-blend-order:
                        priority: 15
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-50k-100k:
                filter:
                    population: { min: 50000, max: 100000 }
                draw:
                    text-blend-order:
                        priority: 17
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-20k-50k:
                filter:
                    population: { min: 20000, max: 50000 }
                draw:
                    text-blend-order:
                        priority: 19
                        font:
                            size: [[9,10px],[14,12px],[15,0px]]
            population-10k-20k:
                filter:
                    population: { min: 10000, max: 20000 }
                draw:
                    text-blend-order:
                        priority: 21
                        font:
                            size: [[9, 10px],[14, 12px],[15, 0px]]
            population-5k-10k:
                filter:
                    population: { min: 5000, max: 10000 }
                draw:
                    text-blend-order:
                        priority: 23
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-2k-5k:
                filter:
                    population: { min: 2000, max: 5000 }
                draw:
                    text-blend-order:
                        priority: 25
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-1k-2k:
                filter:
                    population: { min: 1000, max: 2000 }
                draw:
                    text-blend-order:
                        priority: 27
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
            population-200-1k:
                filter:
                    population: { min: 200, max: 1000 }
                draw:
                    text-blend-order:
                        priority: 28
                        font:
                            size: [[9, 10px], [14, 11px], [15, 0px]]

styles:
    text-blend-order:
        base: text
        blend_order: 1

    checker:
        base: polygons
        texcoords: true
        shaders:
            blocks:
                color: |
                    vec2 st = v_texcoord.xy;
                    vec2 f_st = fract(st*10.);
                    vec2 i_st = floor(st*10.);
                    color.rg = f_st;
                    if (mod(i_st.y,0.15) - mod(i_st.x,0.15) == 0. ) {
                        color.rgb -= 0.2;
                    }

    earth-pixelate:
        base: polygons
        mix: [polygons-pixelate]
        shaders:
            defines:
                PIXELATE_SCALE: 40.
                PIXELATE_COLOR: color.rgb*.12
                PIXELATE_BACKGROUND_COLOR: color.rgb

    water-pixelate:
        base: polygons
        mix: [polygons-pixelate]
        shaders:
            defines:
                PIXELATE_SCALE: 5.
                PIXELATE_COLOR: color.rgb*.395
                PIXELATE_BACKGROUND_COLOR: color.rgb

    buildings-pixelate:
        base: polygons
        mix: [polygons-pixelate]
        shaders:
            defines:
                PIXELATE_SCALE: 25.
                PIXELATE_COLOR: color.rgb*.12
                PIXELATE_BACKGROUND_COLOR: color.rgb

    parks-pixelate:
        base: polygons
        mix: [polygons-pixelate]
        shaders:
            defines:
                PIXELATE_SCALE: 40.
                PIXELATE_COLOR: color.rgb*.17
                PIXELATE_BACKGROUND_COLOR: color.rgb

    parks-stripes-2-gradients:
        base: polygons
        mix: [functions-aastep, patterns-stripes, space-screen, space-tile]
        shaders:
            uniforms:
                u_colors:
                    - [0.013,0.068,0.090] # lower-left
                    - [0.00,0.00,0.00] # lower-right
                    - [0.052,0.109,0.160] # upper-left
                    - [0.043,0.095,0.140] # upper-right
            defines:
                STRIPES_WIDTH: .65
                STRIPES_ALPHA: 1.0
                STRIPES_SCALE: 1.
                STRIPES_ANGLE: 3.14159265
            blocks:
                color: |
                    //vec2 st = getScreenNonStretchCoords();
                    vec2 st = getTileCoords();

                    color.rgb = mix(mix(u_colors[0], u_colors[1], gl_FragCoord.x/u_resolution.x),
                                mix(u_colors[2], u_colors[3], gl_FragCoord.x/u_resolution.x),
                                stripes(st*40.,
                                        STRIPES_WIDTH,
                                        STRIPES_ANGLE));

    ## notes for parks-stripes-2-gradients
    ## gradient across screen space
    ## color.rgb = mix(mix(u_colors[0], u_colors[1], gl_FragCoord.x),
    ##             mix(u_colors[2], u_colors[3], gl_FragCoord.x),
    ##             stripes(st*50.,
    ##             STRIPES_WIDTH,
    ##             STRIPES_ANGLE));
                    

    parks-stripes-gradient:
        base: polygons
        mix: [polygons-stripes]
        shaders:
            defines:
                STRIPES_SCALE: 30
                STRIPES_WIDTH: 0.75
                STRIPES_ALPHA: 1.0
                STRIPES_ANGLE: 3.14159265
            blocks:
                filter: |
                    color.rgb = mix(vec3(0.020,0.020,0.020), vec3(0.092,0.116,0.120), gl_FragCoord.x / u_resolution.x);

    university-stripes-gradient:
        base: polygons
        mix: [polygons-stripes]
        shaders:
            defines:
                STRIPES_SCALE: 10
                STRIPES_WIDTH: 0.75
                STRIPES_ALPHA: 0.25
                STRIPES_ANGLE: 3.14159265
            blocks:
                filter: |
                    color.rgb = mix(vec3(0.140,0.135,0.133), vec3(0.020,0.020,0.020), gl_FragCoord.x / u_resolution.x);

    grid-gradient:
        base: polygons
        mix: [space-tile]
        shaders:
            uniforms:
                u_colors:
                    - [0.119,0.242,0.290] # lower-left
                    - [0.000,0.000,0.000] # lower-right
                    - [0.000,0.000,0.000] # upper-left
                    - [0.073,0.125,0.170] # upper-right
                u_grid_size: 21
            blocks:
                color: |
                    vec2 st = getTileCoords();
                    vec2 f_st = fract(st * u_grid_size);
                    color.rgb = mix(
                        mix(u_colors[0], u_colors[1], f_st.x),
                        mix(u_colors[2], u_colors[3], f_st.x),
                        f_st.y
                    );

    water-pixelate-noise2:
        base: polygons
        mix: [space-tile, generative-random, pattern-noise]
        # animated: true
        shaders:
            defines:
                PIXELATE_SCALE: 12.
                PIXELATE_COLOR: color.rgb*.295
                PIXELATE_BACKGROUND_COLOR: color.rgb
            blocks:
                global: |
                    float pattern(vec2 st, vec2 v, float t) {
                        vec2 p = floor(st+v);
                        return step(t, random(100.+p*.000001)+random(p.x)*0.5 );
                    }
                color: |
                    // vec2 st = getTileCoords();
                    vec2 st = worldPosition().xy * .00005;
                    // // color.rgb = mix(PIXELATE_BACKGROUND_COLOR,
                    // //                 PIXELATE_COLOR,
                    // //                 random(floor(st*
                    // //                     floor(worldPosition().xy*.00001 * PIXELATE_SCALE))));
                    // vec2 ipos = floor(st);
                    // vec2 fpos = fract(st);
                    // if ( step(0.05,fpos.x) * step(0.1,fpos.y) > 0.0 ){
                    //     color = vec4(1.) * max( 1.-(worldPosition().z*.001 + .5), 0. );
                    //     // color = vec4(0.700,0.700,0.700,1.0) * step(.5,random(ipos*vec2(0.0000001,0.01)+floor(worldNormal().xy*10.0)));
                    //     // color *= vec4(0.450,0.450,0.450,1.0) * step(.5,random(ipos));
                    // }

                    // Running lines
                    // vec2 st = vec2(v_texcoord.x,worldPosition().z*0.005);
                    vec2 grid = vec2(100.0,100.);
                    st *= grid;
                    // vec2 ipos = floor(st);  // integer
                    // vec2 fpos = fract(st);  // fraction
                    // vec2 vel = vec2(u_time*max(grid.x,grid.y)); // time
                    // vel *= vec2(-1.,0.0) * random(1.0+ipos.y); // direction
                    // Assign a random value base on the integer coord
                    // vec2 offset = vec2(0.1,0.);
                    // color.r = pattern(st+offset,vel,amount);
                    // color.g = pattern(st,vel,amount);
                    // color.b = pattern(st-offset,vel,amount);
                    color.rgb = vec3(pattern(st, vec2(u_time * 10.), noise(floor(st *.1))));
                    // color.rgb *= step(0.2, fpos.y);

    pattern-noise:
        mix: [space-tile, generative-noise]
        shaders:
            uniforms:
                u_noise_freq: 0.002
                u_noise_scale: 0.03
            blocks:
                global: |
                    vec2 patternNoiseCoords() {
                        float zbase = u_tile_origin.z - 12.;
                        vec2 st = fract(
                            v_pos.xy +
                            noise(worldPosition().xy * u_noise_freq * exp2(zbase)) * u_noise_scale
                        );
                        return st;
                    }

    # water-pixelate-noise1
    # mix: [pattern-noise,polygons-pixelate] # draws double polygons-pixelate
    water-pixelate-noise1:
        base: polygons
        mix: [pattern-noise]
        shaders:
            defines:
                PIXELATE_SCALE: 5.
                PIXELATE_COLOR: color.rgb*.295
                PIXELATE_BACKGROUND_COLOR: color.rgb
            uniforms:
                u_noise_freq: 0.002
                u_noise_scale: 0.085
            blocks:
                color: |
                    color.rgb = mix(PIXELATE_BACKGROUND_COLOR,
                                    PIXELATE_COLOR,
                                    random(floor(patternNoiseCoords()*PIXELATE_SCALE)));
                    //color.rgb = mix(PIXELATE_BACKGROUND_COLOR,
                    //                PIXELATE_COLOR,
                    //                random(floor(getTileCoords()*patternNoiseCoords()*PIXELATE_SCALE)));


    polygons-pixelate:
        ui:
            shaders:
                defines:
                    PIXELATE_SCALE:
                        type: number
                        label: Scale
                        range:
                            min: 1.
                            max: 1000.
                            step: 1.
                    PIXELATE_COLOR:
                        type: color
                        label: Color
                    PIXELATE_BACKGROUND_COLOR:
                        type: color
                        label: 'Background color'

        base: polygons
        mix: [space-tile, generative-random]
        shaders:
            defines:
                PIXELATE_SCALE: 60.
                PIXELATE_COLOR: color.rgb*.85
                PIXELATE_BACKGROUND_COLOR: color.rgb
            blocks:
                color: |
                    color.rgb = mix(PIXELATE_BACKGROUND_COLOR,
                                    PIXELATE_COLOR,
                                    random(floor(getTileCoords()*PIXELATE_SCALE)));

    polygons-glass-walls:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Apply a glass walls to the sides of a geometry
            examples:
                gotham:
                    url: https://tangrams.github.io/tangram-sandbox/styles/gotham.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/gotham.png
                    lines: 131
        texcoords: true
        base: polygons
        mix: [geometry-normal,  generative-random]
        material:
            shininess: 1.
            specular: 0.0
            emission: 0.0
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((worldPosition().z*.001 + .5),1.));
                    
                    if (isWall()) {
                        vec2 st = vec2(v_texcoord.x*10.,worldPosition().z*0.2);
                        vec2 ipos = floor(st);
                        vec2 fpos = fract(st);
                        if ( step(0.01,fpos.x)*step(0.1,fpos.y) > 0.0 ){
                            material.specular = vec4(1.) * max( 1.-(worldPosition().z*.001 + .5), 0. );
                            material.emission = vec4(0.700,0.700,0.700,1.0) * step(.5,random(ipos*vec2(0.0000001,0.01)+floor(worldNormal().xy*10.0)));
                            material.emission *= vec4(0.450,0.450,0.450,1.0) * step(.5,random(ipos));
                        }
                    }
                filter: |
                    color.rgb += vec3(1.)* min( 1.0-(worldPosition().z*.001 + .8) , 0.25 );

    polygons-windows:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Apply a windows patterns on the walls of a geometry
            examples:
                gotham:
                    url: https://tangrams.github.io/tangram-sandbox/styles/gotham.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/gotham.png
                    lines: 128
        texcoords: true
        base: polygons
        mix: [geometry-normal, generative-random]
        material:
            shininess: 1.
            specular: 0.0
            emission: 0.0
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((worldPosition().z*.001 + .5),1.));
                    float t = 0.5;
                    if (isWall()) {
                        vec2 st = vec2(v_texcoord.x*8.,worldPosition().z*0.2);
                        vec2 ipos = floor(st);
                        vec2 fpos = fract(st);
                        if ( step(0.2,fpos.x)*step(0.2,fpos.y) > 0.0 ){
                            material.specular = vec4(1.) * max( 1.-(worldPosition().z*.001 + .5), 0. );
                            material.emission = vec4(0.300,0.300,0.300,1.0) * step(.5,random(ipos+floor(worldNormal().xy*10.0)+t));
                        }
                    }
                filter: |
                    color.rgb += vec3(1.)* min( 1.-(worldPosition().z*.001 + .7) , 0.5 );

    geometry-normal:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |  
                Functions to detect if the surface is a wall (`bool isWall()`) or a roof ('bool isRoof()') based on the normals
        shaders:
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    // Ask to the geometry normals if this surface is a Wall
                    bool isWall () {
                        return dot(vec3(0., 0., 1.), worldNormal()) < 1.0 - TANGRAM_EPSILON;
                    }
                    //
                    // Ask to the geometry normals if this surface is a roof
                    bool isRoof () {
                        return !isWall();
                    }
                    #endif

    space-screen:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Get the coordinates in screen space streaching the proportion ('vec2 getScreenCoords ()') or non-streatching the proportion ('getScreenNonStretchCoords ()')
            examples:
                press:
                    url: https://tangrams.github.io/tangram-sandbox/styles/press.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/press.png
                    lines: 136-145
                radar:
                    url: https://tangrams.github.io/tangram-sandbox/styles/radar.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/radar.png
                    lines: 0-143
        test:
            screen:
                blocks:
                    color: |
                        vec2 st = getScreenCoords();
                        color.rg += fract(st*3.);
            screen_nonstretch:
                blocks:
                    color: |
                        vec2 st = getScreenNonStretchCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec2 getScreenCoords () {
                        return gl_FragCoord.xy / u_resolution.xy;
                    }

                    vec2 getScreenNonStretchCoords () {
                        vec2 st = getScreenCoords();
                        if (u_resolution.y > u_resolution.x ) {
                            st.y *= u_resolution.y/u_resolution.x;
                            st.y -= (u_resolution.y*.5-u_resolution.x*.5)/u_resolution.x;
                        } else {
                            st.x *= u_resolution.x/u_resolution.y;
                            st.x -= (u_resolution.x*.5-u_resolution.y*.5)/u_resolution.y;
                        } 
                        return st;
                    }
                    #endif


    generative-random:
        test:
            random_float: { blocks: { color: "    color.rgb += random(v_texcoord.x*2.);" } }
            random_vec2: { blocks: { color: "    color.rgb += random(v_texcoord.xy*2.);" } }
            random_vec3: { blocks: { color: "    color.rgb += random(vec3(v_texcoord.xy*2.,u_time));" } }
            random2_vec2: { blocks: { color: "    color.rg += random2(v_texcoord.xy*2.);" } }
            random3_vec2: { blocks: { color: "    color.rgb += random3(v_texcoord.xy*2.);" } }
            random3_vec3: { blocks: { color: "    color.rgb += random3(vec3(v_texcoord.xy*2.,u_time));" } }
            random_float_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random(v_texcoord.x*2.);" } }
            random_vec2_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random(v_texcoord.xy*2.);" } }
            random_vec3_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random(vec3(v_texcoord.xy*2.,u_time));" } }
            random2_vec2_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rg += random2(v_texcoord.xy*2.);" } }
            random3_vec2_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random3(v_texcoord.xy*2.);" } }
            random3_vec3_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random3(vec3(v_texcoord.xy*2.,u_time));" } }

        shaders:
            uniforms:
                u_random: https://tangrams.github.io/blocks/generative/imgs/tex16.png
            blocks:
                global: |
                    vec3 random3 (vec2 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        return texture2D(u_random,fract(p*2.),-100.).rgb;
                        #else
                        return fract(sin(vec3( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)), dot(p,vec2(419.2,371.9)) ))*43758.5453);
                        #endif
                    }
                    vec3 random3 (vec3 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        vec2 uv = fract(p.xy+vec2(37.0,17.0)*p.z);
                        return texture2D(u_random, fract(uv*2.), -100.0).rgb;
                        #else
                        float j = 4096.0*sin(dot(p,vec3(17.0, 59.4, 15.0)));
                        vec3 r;
                        r.z = fract(512.0*j);
                        j *= .125;
                        r.x = fract(512.0*j);
                        j *= .125;
                        r.y = fract(512.0*j);
                        return r-0.5;
                        #endif
                    }
                    vec2 random2 (vec2 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        return random3(p).rg;
                        #else
                        return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
                        #endif
                    }
                    float random (float x) {
                        return fract(sin(x)*43758.5453);
                    }
                    float random (vec2 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        return random3(p).r;
                        #else
                        return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));
                        #endif
                    }
                    float random (vec3 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        return random3(p).r;
                        #else
                        return fract(sin(dot(p.xyz, vec3(70.9898,78.233,32.4355)))* 43758.5453123);
                        #endif
                    }

    polygons-transparent:
        base: polygons
        blend: overlay

    polygons-stripes:
        ui:
            shaders:
                defines:
                    STRIPES_SCALE:
                        type: number
                        label: Scale
                        range:
                            min: 1.
                            max: 1000.
                            step: 1.
                    STRIPES_WIDTH:
                        type: number
                        label: Width
                        range:
                            min: 0.
                            max: 1.
                            step: 0.01
                    STRIPES_ALPHA:
                        type: number
                        label: Amount
                        range:
                            min: 0.
                            max: 1.
                            step: 0.01
                    STRIPES_ANGLE:
                        type: number
                        label: Angle (radiants)
                        range:
                            min: 0.
                            max: 3.1415
                            step: 0.1
        base: polygons
        mix: [patterns-stripes, space-tile]
        shaders:
            defines:
                STRIPES_WIDTH: .5
                STRIPES_ALPHA: 1.0
                STRIPES_SCALE: 2.
                STRIPES_ANGLE: PI*0.25
            blocks:
                color: |
                    color.a = stripes(  getTileCoords()*STRIPES_SCALE,
                                        STRIPES_WIDTH,
                                        STRIPES_ANGLE)*STRIPES_ALPHA;

    patterns-stripes:
        mix: [functions-aastep, geometry-matrices]
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // Return a distance function of stripes
                    float stripesDF (vec2 st) {
                        return abs(sin(st.y*PI));
                    }

                    // Adjustable width stripes
                    float stripes (vec2 st, float width) {
                        return aastep(width, stripesDF(st));
                    }

                    // Adjustable Angle
                    float stripes (vec2 st, float width, float angle) {
                        st = rotate2D(angle) * st;
                        return stripes(st, width);
                    }

                    // Faster optimisation of diagonal stripes
                    float diagonalStripes (vec2 st) {
                        vec2 i_st = floor(st);
                        vec2 f_st = fract(st);
                        if (mod(i_st.y,2.) - mod(i_st.x,2.) == 0.) {
                            return 1.0 - aastep(f_st.x,f_st.y);
                        } else {
                            return aastep(f_st.x,f_st.y);
                        }
                    }

                    // Faster optimisation of diagonal stripes with controlable width
                    float diagonalStripes (vec2 st, float width) {
                        st.y -= st.x;
                        return stripes(st, width);
                    }

    geometry-matrices:
        mix: [block]
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Useful set of functions to construct scale, rotation and translation of 2, 3 or 4 dimensions. For more information about matrices read [this chapter from The Book of Shaders](http://thebookofshaders.com/08/)
        shaders:
            blocks:
                global: |
                    // Rotate in 2, 3 and 4 dimensions
                    // ================================
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec2 rotate2D (vec2 st, float a) {
                        return (rotate2D(a)*(st-.5))+.5;
                    }
                    #endif
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat4 rotateX4D (float phi) {
                        return mat4(
                            vec4(1.,0.,0.,0),
                            vec4(0.,cos(phi),-sin(phi),0.),
                            vec4(0.,sin(phi),cos(phi),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat4 rotateY4D (float theta) {
                        return mat4(
                            vec4(cos(theta),0.,-sin(theta),0),
                            vec4(0.,1.,0.,0.),
                            vec4(sin(theta),0.,cos(theta),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                    mat4 rotateZ4D (float psi) {
                        return mat4(
                            vec4(cos(psi),-sin(psi),0.,0),
                            vec4(sin(psi),cos(psi),0.,0.),
                            vec4(0.,0.,1.,0.),
                            vec4(0.,0.,0.,1.));
                    }
                    //
                    // Scale 4 dimensions
                    // ================================
                    mat4 scale4D (float x, float y, float z) {
                        return mat4(
                            vec4(x,   0.0, 0.0, 0.0),
                            vec4(0.0, y,   0.0, 0.0),
                            vec4(0.0, 0.0, z,   0.0),
                            vec4(0.0, 0.0, 0.0, 1.0)
                        );
                    }
                    //
                    // Translate in 4 dimensions
                    mat4 translate4D (float x, float y, float z) {
                        return mat4(
                            vec4(1.0, 0.0, 0.0, 0.0),
                            vec4(0.0, 1.0, 0.0, 0.0),
                            vec4(0.0, 0.0, 1.0, 0.0),
                            vec4(x,   y,   z,   1.0)
                        );
                    }

    functions-aastep:
        doc:
            author:
                name: Matt DesLauriers
                twitter: mattdesl
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                AnitAliased ```step()``` function implemented by [Matt DesLauriers](https://twitter.com/mattdesl) in this module <https://github.com/stackgl/glsl-aastep>
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif
                        #else
                            return step(threshold, value);
                        #endif
                    }

    block:
        shaders:
            defines:
                ADD: '+'
                SUBTRACT: '-'
                MULTIPLY: '*'

                PI: 3.1415926535897932384626433832795
                TWO_PI: 6.2831853071795864769252867665590
                HALF_PI: 1.5707963267948966192313216916398
                QUATER_PI: .785398163

                EPSILON: 0.0000001

                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)

    generative-noise:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Set of Noise functions.
                For more information on this theme read [this chapter of The Book of Shaders about Noise](http://thebookofshaders.com/11/).
        test:
            noise_float: { blocks: { color: "    color.rgb += noise(v_texcoord.x*2.);" } }
            noise_vec2: { blocks: { color: "    color.rgb += noise(v_texcoord.xy*2.);" } }
            noise_vec3: { blocks: { color: "    color.rgb += noise(vec3(v_texcoord.xy*2.,u_time));" } }
            gnoise_vec2: { blocks: { color: "    color.rgb += gnoise(v_texcoord.xy*2.);" } }
            gnoise_vec3: { blocks: { color: "    color.rgb += gnoise(vec3(v_texcoord.xy*2.,u_time));" } }
            snoise_vec2: { blocks: { color: "    color.rgb += snoise(v_texcoord.xy*2.);" } }
            snoise_vec3: { blocks: { color: "    color.rgb += snoise(vec3(v_texcoord.xy*2.,u_time));" } }
            noise_float_t: { defines: { NOISE_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += noise(v_texcoord.x*2.);" } }
            noise_vec2_t: { defines: { NOISE_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += noise(v_texcoord.xy*2.);" } }
            noise_vec3_t: { defines: { NOISE_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += noise(vec3(v_texcoord.xy,u_time)*2.);" } }

        mix: generative-random
        shaders:
            defines:
                NOISE_TEXSAMPLE_SIZE: 256.0
            blocks:
                global: |
                    // Value Noise 
                    float noise (in float x) {
                        #ifdef NOISE_TEXSAMPLE
                        return texture2D(u_random, vec2(x*(1./NOISE_TEXSAMPLE_SIZE))).r;
                        #else
                        float i = floor(x);
                        float f = fract(x);
                        f = f * f * (3.0 - 2.0 * f);
                        return mix(random(i), random(i + 1.0), f);
                        #endif
                    }

                    // Value Noise
                    float noise (vec2 p) {
                        vec2 i = floor(p);
                        vec2 f = fract(p);
                        #ifdef NOISE_TEXSAMPLE
                        vec2 uv = i.xy + f.xy*f.xy*(3.0-2.0*f.xy);
                        return texture2D(u_random, fract((uv+118.4)/NOISE_TEXSAMPLE_SIZE) ).x;
                        #else
                        f = f * f * (3.0 - 2.0 * f);
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        return mix(a, b, f.x) + (c - a) * f.y * (1.0 - f.x) + (d - b) * f.x * f.y;
                        #endif
                    }

                    // Value Noise
                    float noise (vec3 p) {
                        vec3 i = floor(p);
                        vec3 f = fract(p);
                        f = f*f*(3.0-2.0*f);
                        #ifdef NOISE_TEXSAMPLE
                        vec2 uv = (i.xy+vec2(37.0,17.0)*i.z) + f.xy;
                        vec2 rg = texture2D(u_random, fract((uv+.5)/NOISE_TEXSAMPLE_SIZE), -100.0 ).yx;
                        return mix( rg.x, rg.y, f.z );
                        #else
                        float n = i.x + i.y*57.0 + 113.0*i.z;
                        return mix(mix(mix(random(n+0.0),random(n+1.0),f.x),mix(random(n+ 57.0),random(n+ 58.0),f.x),f.y),mix(mix(random(n+113.0),random(n+114.0),f.x),mix(random(n+170.0),random(n+171.0),f.x),f.y),f.z);
                        /*
                        const vec3 step = vec3(110.0, 241.0, 171.0);
                        float n = dot(i, step);
                        return mix( mix(mix(random(n + dot(step, vec3(0,0,0))),
                                            random(n + dot(step, vec3(1,0,0))), f.x),
                                        mix(random(n + dot(step, vec3(0,1,0))),
                                            random(n + dot(step, vec3(1,1,0))), f.x),
                                        f.y),
                                    mix(mix(random(n + dot(step, vec3(0,0,1))),
                                            random(n + dot(step, vec3(1,0,1))), f.x),
                                        mix(random(n + dot(step, vec3(0,1,1))),
                                            random(n + dot(step, vec3(1,1,1))), f.x),
                                    f.y),
                                f.z);
                                */
                        #endif
                    }

                    // Gradient Noise
                    // From IQ (https://www.shadertoy.com/view/XdXGW8)
                    float gnoise (in vec2 p) {
                        vec2 i = floor( p );
                        vec2 f = fract( p );
                        
                        vec2 u = f*f*(3.0-2.0*f);

                        return mix( mix( dot( random2( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), 
                                         dot( random2( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                                    mix( dot( random2( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), 
                                         dot( random2( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
                    }

                    // Gradient Noise
                    // From IQ (https://www.shadertoy.com/view/Xsl3Dl)
                    float gnoise (in vec3 p) {
                        vec3 i = floor( p );
                        vec3 f = fract( p );
                        vec3 u = f*f*(3.0-2.0*f);

                        return mix( mix( mix( dot( random3( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), 
                                              dot( random3( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),
                                         mix( dot( random3( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), 
                                              dot( random3( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),
                                    mix( mix( dot( random3( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), 
                                              dot( random3( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),
                                         mix( dot( random3( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), 
                                              dot( random3( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );
                    }

                    vec3 mod289(vec3 x) { 
                        return x - floor(x * (1.0 / 289.0)) * 289.0; 
                    }
                    vec2 mod289(vec2 x) { 
                        return x - floor(x * (1.0 / 289.0)) * 289.0; 
                    }
                    vec3 permute(vec3 x) { 
                        return mod289(((x*34.0)+1.0)*x); 
                    }

                    // Simplex Noise
                    // from Ian McEwan, Ashima Arts
                    float snoise(vec2 v) {

                        // Precompute values for skewed triangular grid
                        const vec4 C = vec4(0.211324865405187,
                                            // (3.0-sqrt(3.0))/6.0
                                            0.366025403784439,  
                                            // 0.5*(sqrt(3.0)-1.0)
                                            -0.577350269189626,  
                                            // -1.0 + 2.0 * C.x
                                            0.024390243902439); 
                                            // 1.0 / 41.0

                        // First corner (x0)
                        vec2 i  = floor(v + dot(v, C.yy));
                        vec2 x0 = v - i + dot(i, C.xx);

                        // Other two corners (x1, x2)
                        vec2 i1 = vec2(0.0);
                        i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);
                        vec2 x1 = x0.xy + C.xx - i1;
                        vec2 x2 = x0.xy + C.zz;

                        // Do some permutations to avoid
                        // truncation effects in permutation
                        i = mod289(i);
                        vec3 p = permute(
                                permute( i.y + vec3(0.0, i1.y, 1.0))
                                    + i.x + vec3(0.0, i1.x, 1.0 ));

                        vec3 m = max(0.5 - vec3(
                                            dot(x0,x0), 
                                            dot(x1,x1), 
                                            dot(x2,x2)
                                            ), 0.0);

                        m = m*m ;
                        m = m*m ;

                        // Gradients: 
                        //  41 pts uniformly over a line, mapped onto a diamond
                        //  The ring size 17*17 = 289 is close to a multiple 
                        //      of 41 (41*7 = 287)

                        vec3 x = 2.0 * fract(p * C.www) - 1.0;
                        vec3 h = abs(x) - 0.5;
                        vec3 ox = floor(x + 0.5);
                        vec3 a0 = x - ox;

                        // Normalise gradients implicitly by scaling m
                        // Approximation of: m *= inversesqrt(a0*a0 + h*h);
                        m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);

                        // Compute final noise value at P
                        vec3 g = vec3(0.0);
                        g.x  = a0.x  * x0.x  + h.x  * x0.y;
                        g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);
                        return 130.0 * dot(m, g);
                    }

                    // Simplex Noise
                    // from Ian McEwan, Ashima Arts
                    const float F3 =  0.3333333;
                    const float G3 =  0.1666667;
                    float snoise (vec3 p) {
                        vec3 s = floor(p + dot(p, vec3(F3)));
                        vec3 x = p - s + dot(s, vec3(G3));
                        vec3 e = step(vec3(0.0), x - x.yzx);
                        vec3 i1 = e*(1.0 - e.zxy);
                        vec3 i2 = 1.0 - e.zxy*(1.0 - e);
                        vec3 x1 = x - i1 + G3;
                        vec3 x2 = x - i2 + 2.0*G3;
                        vec3 x3 = x - 1.0 + 3.0*G3;
                        vec4 w, d;
                        w.x = dot(x, x);
                        w.y = dot(x1, x1);
                        w.z = dot(x2, x2);
                        w.w = dot(x3, x3);
                        w = max(0.6 - w, 0.0);
                        d.x = dot(random3(s), x);
                        d.y = dot(random3(s + i1), x1);
                        d.z = dot(random3(s + i2), x2);
                        d.w = dot(random3(s + 1.0), x3);
                        w *= w;
                        w *= w;
                        d *= w;
                        return dot(d, vec4(52.0));
                    }

    space-tile:
        test:
            tile:
                defines:
                    v_pos: 'v_texcoord'
                blocks:
                    color: |
                        vec2 st = getTileCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    #ifndef v_pos
                    varying vec3 v_pos;
                    #endif

                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;